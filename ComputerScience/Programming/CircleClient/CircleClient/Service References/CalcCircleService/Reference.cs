//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CircleClientProject.CalcCircleService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcCircleService.ICircle")]
    public interface ICircle {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircle/DoWork", ReplyAction="http://tempuri.org/ICircle/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircle/DoWork", ReplyAction="http://tempuri.org/ICircle/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircle/CalcDiameter", ReplyAction="http://tempuri.org/ICircle/CalcDiameterResponse")]
        double CalcDiameter(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircle/CalcDiameter", ReplyAction="http://tempuri.org/ICircle/CalcDiameterResponse")]
        System.Threading.Tasks.Task<double> CalcDiameterAsync(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircle/CalcCircumference", ReplyAction="http://tempuri.org/ICircle/CalcCircumferenceResponse")]
        double CalcCircumference(double radius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircle/CalcCircumference", ReplyAction="http://tempuri.org/ICircle/CalcCircumferenceResponse")]
        System.Threading.Tasks.Task<double> CalcCircumferenceAsync(double radius);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICircleChannel : CircleClientProject.CalcCircleService.ICircle, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CircleClient : System.ServiceModel.ClientBase<CircleClientProject.CalcCircleService.ICircle>, CircleClientProject.CalcCircleService.ICircle {
        
        public CircleClient() {
        }
        
        public CircleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CircleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CircleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CircleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public double CalcDiameter(double radius) {
            return base.Channel.CalcDiameter(radius);
        }
        
        public System.Threading.Tasks.Task<double> CalcDiameterAsync(double radius) {
            return base.Channel.CalcDiameterAsync(radius);
        }
        
        public double CalcCircumference(double radius) {
            return base.Channel.CalcCircumference(radius);
        }
        
        public System.Threading.Tasks.Task<double> CalcCircumferenceAsync(double radius) {
            return base.Channel.CalcCircumferenceAsync(radius);
        }
    }
}
