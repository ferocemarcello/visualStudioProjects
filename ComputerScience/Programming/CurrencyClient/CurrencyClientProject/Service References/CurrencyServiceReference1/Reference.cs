//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyClientProject.CurrencyServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CurrencyServer.CurrencyItem", Namespace="http://schemas.datacontract.org/2004/07/CurrencyServer")]
    [System.SerializableAttribute()]
    public partial class CurrencyServerCurrencyItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double exchangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double exchange {
            get {
                return this.exchangeField;
            }
            set {
                if ((this.exchangeField.Equals(value) != true)) {
                    this.exchangeField = value;
                    this.RaisePropertyChanged("exchange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iso {
            get {
                return this.isoField;
            }
            set {
                if ((object.ReferenceEquals(this.isoField, value) != true)) {
                    this.isoField = value;
                    this.RaisePropertyChanged("iso");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConversionType", Namespace="http://schemas.datacontract.org/2004/07/CurrencyServer")]
    [System.SerializableAttribute()]
    public partial class ConversionType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double amountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iso1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iso2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double amount {
            get {
                return this.amountField;
            }
            set {
                if ((this.amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.RaisePropertyChanged("amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iso1 {
            get {
                return this.iso1Field;
            }
            set {
                if ((object.ReferenceEquals(this.iso1Field, value) != true)) {
                    this.iso1Field = value;
                    this.RaisePropertyChanged("iso1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iso2 {
            get {
                return this.iso2Field;
            }
            set {
                if ((object.ReferenceEquals(this.iso2Field, value) != true)) {
                    this.iso2Field = value;
                    this.RaisePropertyChanged("iso2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyServiceReference1.ICurrencyServer")]
    public interface ICurrencyServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/DoWork", ReplyAction="http://tempuri.org/ICurrencyServer/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/DoWork", ReplyAction="http://tempuri.org/ICurrencyServer/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/DkktoEuro", ReplyAction="http://tempuri.org/ICurrencyServer/DkktoEuroResponse")]
        double DkktoEuro(double dkk);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/DkktoEuro", ReplyAction="http://tempuri.org/ICurrencyServer/DkktoEuroResponse")]
        System.IAsyncResult BeginDkktoEuro(double dkk, System.AsyncCallback callback, object asyncState);
        
        double EndDkktoEuro(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/IsoToExchangeRate", ReplyAction="http://tempuri.org/ICurrencyServer/IsoToExchangeRateResponse")]
        double IsoToExchangeRate(string iso);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/IsoToExchangeRate", ReplyAction="http://tempuri.org/ICurrencyServer/IsoToExchangeRateResponse")]
        System.IAsyncResult BeginIsoToExchangeRate(string iso, System.AsyncCallback callback, object asyncState);
        
        double EndIsoToExchangeRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/getCurrencyObjects", ReplyAction="http://tempuri.org/ICurrencyServer/getCurrencyObjectsResponse")]
        CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[] getCurrencyObjects();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/getCurrencyObjects", ReplyAction="http://tempuri.org/ICurrencyServer/getCurrencyObjectsResponse")]
        System.IAsyncResult BegingetCurrencyObjects(System.AsyncCallback callback, object asyncState);
        
        CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[] EndgetCurrencyObjects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIso", ReplyAction="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIsoResponse")]
        double ConvertFromIsoToIso(string iso1, string iso2, double amount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIso", ReplyAction="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIsoResponse")]
        System.IAsyncResult BeginConvertFromIsoToIso(string iso1, string iso2, double amount, System.AsyncCallback callback, object asyncState);
        
        double EndConvertFromIsoToIso(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/ChangeExchangeRate", ReplyAction="http://tempuri.org/ICurrencyServer/ChangeExchangeRateResponse")]
        void ChangeExchangeRate(string iso, double amount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/ChangeExchangeRate", ReplyAction="http://tempuri.org/ICurrencyServer/ChangeExchangeRateResponse")]
        System.IAsyncResult BeginChangeExchangeRate(string iso, double amount, System.AsyncCallback callback, object asyncState);
        
        void EndChangeExchangeRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/CreateExchangeRate", ReplyAction="http://tempuri.org/ICurrencyServer/CreateExchangeRateResponse")]
        void CreateExchangeRate(string iso, double amount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/CreateExchangeRate", ReplyAction="http://tempuri.org/ICurrencyServer/CreateExchangeRateResponse")]
        System.IAsyncResult BeginCreateExchangeRate(string iso, double amount, System.AsyncCallback callback, object asyncState);
        
        void EndCreateExchangeRate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIsoKeepSession", ReplyAction="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIsoKeepSessionResponse")]
        double ConvertFromIsoToIsoKeepSession(string iso1, string iso2, double amount);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIsoKeepSession", ReplyAction="http://tempuri.org/ICurrencyServer/ConvertFromIsoToIsoKeepSessionResponse")]
        System.IAsyncResult BeginConvertFromIsoToIsoKeepSession(string iso1, string iso2, double amount, System.AsyncCallback callback, object asyncState);
        
        double EndConvertFromIsoToIsoKeepSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/allConversions", ReplyAction="http://tempuri.org/ICurrencyServer/allConversionsResponse")]
        CurrencyClientProject.CurrencyServiceReference1.ConversionType[] allConversions();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/allConversions", ReplyAction="http://tempuri.org/ICurrencyServer/allConversionsResponse")]
        System.IAsyncResult BeginallConversions(System.AsyncCallback callback, object asyncState);
        
        CurrencyClientProject.CurrencyServiceReference1.ConversionType[] EndallConversions(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyServer/getNumberOfChanges", ReplyAction="http://tempuri.org/ICurrencyServer/getNumberOfChangesResponse")]
        int getNumberOfChanges();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ICurrencyServer/getNumberOfChanges", ReplyAction="http://tempuri.org/ICurrencyServer/getNumberOfChangesResponse")]
        System.IAsyncResult BegingetNumberOfChanges(System.AsyncCallback callback, object asyncState);
        
        int EndgetNumberOfChanges(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyServerChannel : CurrencyClientProject.CurrencyServiceReference1.ICurrencyServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DkktoEuroCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DkktoEuroCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsoToExchangeRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsoToExchangeRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCurrencyObjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCurrencyObjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertFromIsoToIsoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertFromIsoToIsoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConvertFromIsoToIsoKeepSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConvertFromIsoToIsoKeepSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class allConversionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public allConversionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CurrencyClientProject.CurrencyServiceReference1.ConversionType[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CurrencyClientProject.CurrencyServiceReference1.ConversionType[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getNumberOfChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getNumberOfChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyServerClient : System.ServiceModel.ClientBase<CurrencyClientProject.CurrencyServiceReference1.ICurrencyServer>, CurrencyClientProject.CurrencyServiceReference1.ICurrencyServer {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginDkktoEuroDelegate;
        
        private EndOperationDelegate onEndDkktoEuroDelegate;
        
        private System.Threading.SendOrPostCallback onDkktoEuroCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsoToExchangeRateDelegate;
        
        private EndOperationDelegate onEndIsoToExchangeRateDelegate;
        
        private System.Threading.SendOrPostCallback onIsoToExchangeRateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCurrencyObjectsDelegate;
        
        private EndOperationDelegate onEndgetCurrencyObjectsDelegate;
        
        private System.Threading.SendOrPostCallback ongetCurrencyObjectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertFromIsoToIsoDelegate;
        
        private EndOperationDelegate onEndConvertFromIsoToIsoDelegate;
        
        private System.Threading.SendOrPostCallback onConvertFromIsoToIsoCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeExchangeRateDelegate;
        
        private EndOperationDelegate onEndChangeExchangeRateDelegate;
        
        private System.Threading.SendOrPostCallback onChangeExchangeRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateExchangeRateDelegate;
        
        private EndOperationDelegate onEndCreateExchangeRateDelegate;
        
        private System.Threading.SendOrPostCallback onCreateExchangeRateCompletedDelegate;
        
        private BeginOperationDelegate onBeginConvertFromIsoToIsoKeepSessionDelegate;
        
        private EndOperationDelegate onEndConvertFromIsoToIsoKeepSessionDelegate;
        
        private System.Threading.SendOrPostCallback onConvertFromIsoToIsoKeepSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginallConversionsDelegate;
        
        private EndOperationDelegate onEndallConversionsDelegate;
        
        private System.Threading.SendOrPostCallback onallConversionsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetNumberOfChangesDelegate;
        
        private EndOperationDelegate onEndgetNumberOfChangesDelegate;
        
        private System.Threading.SendOrPostCallback ongetNumberOfChangesCompletedDelegate;
        
        public CurrencyServerClient() {
        }
        
        public CurrencyServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<DkktoEuroCompletedEventArgs> DkktoEuroCompleted;
        
        public event System.EventHandler<IsoToExchangeRateCompletedEventArgs> IsoToExchangeRateCompleted;
        
        public event System.EventHandler<getCurrencyObjectsCompletedEventArgs> getCurrencyObjectsCompleted;
        
        public event System.EventHandler<ConvertFromIsoToIsoCompletedEventArgs> ConvertFromIsoToIsoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeExchangeRateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateExchangeRateCompleted;
        
        public event System.EventHandler<ConvertFromIsoToIsoKeepSessionCompletedEventArgs> ConvertFromIsoToIsoKeepSessionCompleted;
        
        public event System.EventHandler<allConversionsCompletedEventArgs> allConversionsCompleted;
        
        public event System.EventHandler<getNumberOfChangesCompletedEventArgs> getNumberOfChangesCompleted;
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            this.EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        public double DkktoEuro(double dkk) {
            return base.Channel.DkktoEuro(dkk);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDkktoEuro(double dkk, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDkktoEuro(dkk, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndDkktoEuro(System.IAsyncResult result) {
            return base.Channel.EndDkktoEuro(result);
        }
        
        private System.IAsyncResult OnBeginDkktoEuro(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double dkk = ((double)(inValues[0]));
            return this.BeginDkktoEuro(dkk, callback, asyncState);
        }
        
        private object[] OnEndDkktoEuro(System.IAsyncResult result) {
            double retVal = this.EndDkktoEuro(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDkktoEuroCompleted(object state) {
            if ((this.DkktoEuroCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DkktoEuroCompleted(this, new DkktoEuroCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DkktoEuroAsync(double dkk) {
            this.DkktoEuroAsync(dkk, null);
        }
        
        public void DkktoEuroAsync(double dkk, object userState) {
            if ((this.onBeginDkktoEuroDelegate == null)) {
                this.onBeginDkktoEuroDelegate = new BeginOperationDelegate(this.OnBeginDkktoEuro);
            }
            if ((this.onEndDkktoEuroDelegate == null)) {
                this.onEndDkktoEuroDelegate = new EndOperationDelegate(this.OnEndDkktoEuro);
            }
            if ((this.onDkktoEuroCompletedDelegate == null)) {
                this.onDkktoEuroCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDkktoEuroCompleted);
            }
            base.InvokeAsync(this.onBeginDkktoEuroDelegate, new object[] {
                        dkk}, this.onEndDkktoEuroDelegate, this.onDkktoEuroCompletedDelegate, userState);
        }
        
        public double IsoToExchangeRate(string iso) {
            return base.Channel.IsoToExchangeRate(iso);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginIsoToExchangeRate(string iso, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsoToExchangeRate(iso, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndIsoToExchangeRate(System.IAsyncResult result) {
            return base.Channel.EndIsoToExchangeRate(result);
        }
        
        private System.IAsyncResult OnBeginIsoToExchangeRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string iso = ((string)(inValues[0]));
            return this.BeginIsoToExchangeRate(iso, callback, asyncState);
        }
        
        private object[] OnEndIsoToExchangeRate(System.IAsyncResult result) {
            double retVal = this.EndIsoToExchangeRate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsoToExchangeRateCompleted(object state) {
            if ((this.IsoToExchangeRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsoToExchangeRateCompleted(this, new IsoToExchangeRateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsoToExchangeRateAsync(string iso) {
            this.IsoToExchangeRateAsync(iso, null);
        }
        
        public void IsoToExchangeRateAsync(string iso, object userState) {
            if ((this.onBeginIsoToExchangeRateDelegate == null)) {
                this.onBeginIsoToExchangeRateDelegate = new BeginOperationDelegate(this.OnBeginIsoToExchangeRate);
            }
            if ((this.onEndIsoToExchangeRateDelegate == null)) {
                this.onEndIsoToExchangeRateDelegate = new EndOperationDelegate(this.OnEndIsoToExchangeRate);
            }
            if ((this.onIsoToExchangeRateCompletedDelegate == null)) {
                this.onIsoToExchangeRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsoToExchangeRateCompleted);
            }
            base.InvokeAsync(this.onBeginIsoToExchangeRateDelegate, new object[] {
                        iso}, this.onEndIsoToExchangeRateDelegate, this.onIsoToExchangeRateCompletedDelegate, userState);
        }
        
        public CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[] getCurrencyObjects() {
            return base.Channel.getCurrencyObjects();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCurrencyObjects(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCurrencyObjects(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[] EndgetCurrencyObjects(System.IAsyncResult result) {
            return base.Channel.EndgetCurrencyObjects(result);
        }
        
        private System.IAsyncResult OnBegingetCurrencyObjects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetCurrencyObjects(callback, asyncState);
        }
        
        private object[] OnEndgetCurrencyObjects(System.IAsyncResult result) {
            CurrencyClientProject.CurrencyServiceReference1.CurrencyServerCurrencyItem[] retVal = this.EndgetCurrencyObjects(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCurrencyObjectsCompleted(object state) {
            if ((this.getCurrencyObjectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCurrencyObjectsCompleted(this, new getCurrencyObjectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCurrencyObjectsAsync() {
            this.getCurrencyObjectsAsync(null);
        }
        
        public void getCurrencyObjectsAsync(object userState) {
            if ((this.onBegingetCurrencyObjectsDelegate == null)) {
                this.onBegingetCurrencyObjectsDelegate = new BeginOperationDelegate(this.OnBegingetCurrencyObjects);
            }
            if ((this.onEndgetCurrencyObjectsDelegate == null)) {
                this.onEndgetCurrencyObjectsDelegate = new EndOperationDelegate(this.OnEndgetCurrencyObjects);
            }
            if ((this.ongetCurrencyObjectsCompletedDelegate == null)) {
                this.ongetCurrencyObjectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCurrencyObjectsCompleted);
            }
            base.InvokeAsync(this.onBegingetCurrencyObjectsDelegate, null, this.onEndgetCurrencyObjectsDelegate, this.ongetCurrencyObjectsCompletedDelegate, userState);
        }
        
        public double ConvertFromIsoToIso(string iso1, string iso2, double amount) {
            return base.Channel.ConvertFromIsoToIso(iso1, iso2, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertFromIsoToIso(string iso1, string iso2, double amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertFromIsoToIso(iso1, iso2, amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndConvertFromIsoToIso(System.IAsyncResult result) {
            return base.Channel.EndConvertFromIsoToIso(result);
        }
        
        private System.IAsyncResult OnBeginConvertFromIsoToIso(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string iso1 = ((string)(inValues[0]));
            string iso2 = ((string)(inValues[1]));
            double amount = ((double)(inValues[2]));
            return this.BeginConvertFromIsoToIso(iso1, iso2, amount, callback, asyncState);
        }
        
        private object[] OnEndConvertFromIsoToIso(System.IAsyncResult result) {
            double retVal = this.EndConvertFromIsoToIso(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertFromIsoToIsoCompleted(object state) {
            if ((this.ConvertFromIsoToIsoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertFromIsoToIsoCompleted(this, new ConvertFromIsoToIsoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertFromIsoToIsoAsync(string iso1, string iso2, double amount) {
            this.ConvertFromIsoToIsoAsync(iso1, iso2, amount, null);
        }
        
        public void ConvertFromIsoToIsoAsync(string iso1, string iso2, double amount, object userState) {
            if ((this.onBeginConvertFromIsoToIsoDelegate == null)) {
                this.onBeginConvertFromIsoToIsoDelegate = new BeginOperationDelegate(this.OnBeginConvertFromIsoToIso);
            }
            if ((this.onEndConvertFromIsoToIsoDelegate == null)) {
                this.onEndConvertFromIsoToIsoDelegate = new EndOperationDelegate(this.OnEndConvertFromIsoToIso);
            }
            if ((this.onConvertFromIsoToIsoCompletedDelegate == null)) {
                this.onConvertFromIsoToIsoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertFromIsoToIsoCompleted);
            }
            base.InvokeAsync(this.onBeginConvertFromIsoToIsoDelegate, new object[] {
                        iso1,
                        iso2,
                        amount}, this.onEndConvertFromIsoToIsoDelegate, this.onConvertFromIsoToIsoCompletedDelegate, userState);
        }
        
        public void ChangeExchangeRate(string iso, double amount) {
            base.Channel.ChangeExchangeRate(iso, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeExchangeRate(string iso, double amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeExchangeRate(iso, amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndChangeExchangeRate(System.IAsyncResult result) {
            base.Channel.EndChangeExchangeRate(result);
        }
        
        private System.IAsyncResult OnBeginChangeExchangeRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string iso = ((string)(inValues[0]));
            double amount = ((double)(inValues[1]));
            return this.BeginChangeExchangeRate(iso, amount, callback, asyncState);
        }
        
        private object[] OnEndChangeExchangeRate(System.IAsyncResult result) {
            this.EndChangeExchangeRate(result);
            return null;
        }
        
        private void OnChangeExchangeRateCompleted(object state) {
            if ((this.ChangeExchangeRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeExchangeRateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeExchangeRateAsync(string iso, double amount) {
            this.ChangeExchangeRateAsync(iso, amount, null);
        }
        
        public void ChangeExchangeRateAsync(string iso, double amount, object userState) {
            if ((this.onBeginChangeExchangeRateDelegate == null)) {
                this.onBeginChangeExchangeRateDelegate = new BeginOperationDelegate(this.OnBeginChangeExchangeRate);
            }
            if ((this.onEndChangeExchangeRateDelegate == null)) {
                this.onEndChangeExchangeRateDelegate = new EndOperationDelegate(this.OnEndChangeExchangeRate);
            }
            if ((this.onChangeExchangeRateCompletedDelegate == null)) {
                this.onChangeExchangeRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeExchangeRateCompleted);
            }
            base.InvokeAsync(this.onBeginChangeExchangeRateDelegate, new object[] {
                        iso,
                        amount}, this.onEndChangeExchangeRateDelegate, this.onChangeExchangeRateCompletedDelegate, userState);
        }
        
        public void CreateExchangeRate(string iso, double amount) {
            base.Channel.CreateExchangeRate(iso, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCreateExchangeRate(string iso, double amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateExchangeRate(iso, amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCreateExchangeRate(System.IAsyncResult result) {
            base.Channel.EndCreateExchangeRate(result);
        }
        
        private System.IAsyncResult OnBeginCreateExchangeRate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string iso = ((string)(inValues[0]));
            double amount = ((double)(inValues[1]));
            return this.BeginCreateExchangeRate(iso, amount, callback, asyncState);
        }
        
        private object[] OnEndCreateExchangeRate(System.IAsyncResult result) {
            this.EndCreateExchangeRate(result);
            return null;
        }
        
        private void OnCreateExchangeRateCompleted(object state) {
            if ((this.CreateExchangeRateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateExchangeRateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateExchangeRateAsync(string iso, double amount) {
            this.CreateExchangeRateAsync(iso, amount, null);
        }
        
        public void CreateExchangeRateAsync(string iso, double amount, object userState) {
            if ((this.onBeginCreateExchangeRateDelegate == null)) {
                this.onBeginCreateExchangeRateDelegate = new BeginOperationDelegate(this.OnBeginCreateExchangeRate);
            }
            if ((this.onEndCreateExchangeRateDelegate == null)) {
                this.onEndCreateExchangeRateDelegate = new EndOperationDelegate(this.OnEndCreateExchangeRate);
            }
            if ((this.onCreateExchangeRateCompletedDelegate == null)) {
                this.onCreateExchangeRateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateExchangeRateCompleted);
            }
            base.InvokeAsync(this.onBeginCreateExchangeRateDelegate, new object[] {
                        iso,
                        amount}, this.onEndCreateExchangeRateDelegate, this.onCreateExchangeRateCompletedDelegate, userState);
        }
        
        public double ConvertFromIsoToIsoKeepSession(string iso1, string iso2, double amount) {
            return base.Channel.ConvertFromIsoToIsoKeepSession(iso1, iso2, amount);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginConvertFromIsoToIsoKeepSession(string iso1, string iso2, double amount, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConvertFromIsoToIsoKeepSession(iso1, iso2, amount, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndConvertFromIsoToIsoKeepSession(System.IAsyncResult result) {
            return base.Channel.EndConvertFromIsoToIsoKeepSession(result);
        }
        
        private System.IAsyncResult OnBeginConvertFromIsoToIsoKeepSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string iso1 = ((string)(inValues[0]));
            string iso2 = ((string)(inValues[1]));
            double amount = ((double)(inValues[2]));
            return this.BeginConvertFromIsoToIsoKeepSession(iso1, iso2, amount, callback, asyncState);
        }
        
        private object[] OnEndConvertFromIsoToIsoKeepSession(System.IAsyncResult result) {
            double retVal = this.EndConvertFromIsoToIsoKeepSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnConvertFromIsoToIsoKeepSessionCompleted(object state) {
            if ((this.ConvertFromIsoToIsoKeepSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConvertFromIsoToIsoKeepSessionCompleted(this, new ConvertFromIsoToIsoKeepSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConvertFromIsoToIsoKeepSessionAsync(string iso1, string iso2, double amount) {
            this.ConvertFromIsoToIsoKeepSessionAsync(iso1, iso2, amount, null);
        }
        
        public void ConvertFromIsoToIsoKeepSessionAsync(string iso1, string iso2, double amount, object userState) {
            if ((this.onBeginConvertFromIsoToIsoKeepSessionDelegate == null)) {
                this.onBeginConvertFromIsoToIsoKeepSessionDelegate = new BeginOperationDelegate(this.OnBeginConvertFromIsoToIsoKeepSession);
            }
            if ((this.onEndConvertFromIsoToIsoKeepSessionDelegate == null)) {
                this.onEndConvertFromIsoToIsoKeepSessionDelegate = new EndOperationDelegate(this.OnEndConvertFromIsoToIsoKeepSession);
            }
            if ((this.onConvertFromIsoToIsoKeepSessionCompletedDelegate == null)) {
                this.onConvertFromIsoToIsoKeepSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertFromIsoToIsoKeepSessionCompleted);
            }
            base.InvokeAsync(this.onBeginConvertFromIsoToIsoKeepSessionDelegate, new object[] {
                        iso1,
                        iso2,
                        amount}, this.onEndConvertFromIsoToIsoKeepSessionDelegate, this.onConvertFromIsoToIsoKeepSessionCompletedDelegate, userState);
        }
        
        public CurrencyClientProject.CurrencyServiceReference1.ConversionType[] allConversions() {
            return base.Channel.allConversions();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginallConversions(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginallConversions(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CurrencyClientProject.CurrencyServiceReference1.ConversionType[] EndallConversions(System.IAsyncResult result) {
            return base.Channel.EndallConversions(result);
        }
        
        private System.IAsyncResult OnBeginallConversions(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginallConversions(callback, asyncState);
        }
        
        private object[] OnEndallConversions(System.IAsyncResult result) {
            CurrencyClientProject.CurrencyServiceReference1.ConversionType[] retVal = this.EndallConversions(result);
            return new object[] {
                    retVal};
        }
        
        private void OnallConversionsCompleted(object state) {
            if ((this.allConversionsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.allConversionsCompleted(this, new allConversionsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void allConversionsAsync() {
            this.allConversionsAsync(null);
        }
        
        public void allConversionsAsync(object userState) {
            if ((this.onBeginallConversionsDelegate == null)) {
                this.onBeginallConversionsDelegate = new BeginOperationDelegate(this.OnBeginallConversions);
            }
            if ((this.onEndallConversionsDelegate == null)) {
                this.onEndallConversionsDelegate = new EndOperationDelegate(this.OnEndallConversions);
            }
            if ((this.onallConversionsCompletedDelegate == null)) {
                this.onallConversionsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnallConversionsCompleted);
            }
            base.InvokeAsync(this.onBeginallConversionsDelegate, null, this.onEndallConversionsDelegate, this.onallConversionsCompletedDelegate, userState);
        }
        
        public int getNumberOfChanges() {
            return base.Channel.getNumberOfChanges();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetNumberOfChanges(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetNumberOfChanges(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndgetNumberOfChanges(System.IAsyncResult result) {
            return base.Channel.EndgetNumberOfChanges(result);
        }
        
        private System.IAsyncResult OnBegingetNumberOfChanges(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetNumberOfChanges(callback, asyncState);
        }
        
        private object[] OnEndgetNumberOfChanges(System.IAsyncResult result) {
            int retVal = this.EndgetNumberOfChanges(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetNumberOfChangesCompleted(object state) {
            if ((this.getNumberOfChangesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getNumberOfChangesCompleted(this, new getNumberOfChangesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getNumberOfChangesAsync() {
            this.getNumberOfChangesAsync(null);
        }
        
        public void getNumberOfChangesAsync(object userState) {
            if ((this.onBegingetNumberOfChangesDelegate == null)) {
                this.onBegingetNumberOfChangesDelegate = new BeginOperationDelegate(this.OnBegingetNumberOfChanges);
            }
            if ((this.onEndgetNumberOfChangesDelegate == null)) {
                this.onEndgetNumberOfChangesDelegate = new EndOperationDelegate(this.OnEndgetNumberOfChanges);
            }
            if ((this.ongetNumberOfChangesCompletedDelegate == null)) {
                this.ongetNumberOfChangesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetNumberOfChangesCompleted);
            }
            base.InvokeAsync(this.onBegingetNumberOfChangesDelegate, null, this.onEndgetNumberOfChangesDelegate, this.ongetNumberOfChangesCompletedDelegate, userState);
        }
    }
}
